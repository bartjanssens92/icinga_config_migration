#!/usr/bin/python2.7
from convert_lib.general import debug,info,error,write_configfile,append_configfile
from convert_lib.build_hash import build_hash
from commands import build_icinga_commands
from collections import OrderedDict

def build_icinga_services(object_hash,outputfile,inputdir):
    """Function to build the icinga services config file:
apply Service "service1" {
  import "generic-service"
  check_command = "test_check"

  assign where host.name in [ "localhost1", "localhost2" ]
  vars.argument = "test"
}
    """
    # Header
    header = '# File generated by script, do not edit!\n'
    write_configfile(header, outputfile)

    #Defaults
    write_blocks = 0
    commands_hash = build_icinga_commands(build_hash('command',inputdir),'dummydir',False)

    for service in object_hash:
        debug('--------------------')
        debug(service)
        debug('--------------------')
        debug(object_hash[service]['config'])

        # Make sure the servicename is sane
        if '!' in service:
            service_name = service.split('!')[0]
        else:
            service_name = service

        # Service name needs to be uniq
        sane_service = service.replace('!','_').replace('/','').replace('"','')

        # Build the config_block
        config_block = 'apply Service "' + sane_service + '" {\n'
        debug(sane_service)

        # Get the import
        if 'use' in object_hash[service]['config']:
            config_block += '  import "' + object_hash[service]['config']['use'] + '"\n'
        else:
            config_block += '  import "generic-service"\n'

        # Get the check_command
        if 'check_command' in object_hash[service]['config']:
            check_command = object_hash[service]['config']['check_command']

            # If it's a list, join it
            if isinstance(check_command, list):
                check_command = ",".join(check_command)

            debug("Check command: " + check_command)
            # This means that the command is passing options
            if '!' in service:
                sane_check_command = check_command.split('!')[0]
                config_block += '  check_command = "' + sane_check_command + '"\n'
                config_block += '\n'

                # Get the arguments of the command
                arguments = commands_hash[sane_check_command]
                #debug('Arguments: ' + str(arguments))

                # Build the values to pass
                argument_i = 1
                for key in arguments:
                    # Check if the value of the key is $ARG\n$
                    if arguments[key] in ['$ARG1$','$ARG2$','$ARG3$','$ARG4$']:
                        key = 'vars.' + service_name.replace('-','_') + '_' + key.translate(None, '-')
                        value = check_command.split('!')[argument_i].replace('"','\\"')
                        config_block += '  ' + key + ' = "' + value + '"\n'
                        argument_i+= 1
                    else:
                        pass

            else:
                config_block += '  check_command = "' + check_command + '"\n'

        # if there is no check_command there is nothing to apply
        else:
            continue
            #config_block += '  check_command = "' + object_hash[service]['config']['use'] + '"\n'

        config_block += '\n'
        # Get the hosts
        config_block += '  assign where host.name in [ "' + '", "'.join(object_hash[service]['hosts']) + '" ]\n'

        # Close the config_block
        config_block += '}\n'

        # Print the config in the config file
        #debug("\n" + config_block)
        append_configfile(config_block, outputfile)
        write_blocks += 1

    info('Wrote ' + str(write_blocks) + ' service objects')
