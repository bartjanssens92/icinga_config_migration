#!/usr/bin/python2.7
from convert_lib.general import info,error,write_configfile,append_configfile
from convert_lib.general import debug as debug_general
from convert_lib.build_hash import build_hash
from notifications import build_notifications

def debug(msg):
    """
    Function to enable per-object debugging.
    """
    param_debug = False
    if param_debug:
        debug_general(msg)

def build_icinga_hosts(object_hash,outputfile,inputdir):
    """Function to build the icinga hosts config file:
object Host "$hostname" {
  import "linux-host"

  address = "$address"

  vars.environment = "$environment"

  vars.notification["$notification_method"] = {
    groups = [ "$contactgroups" ]
    users = [ "$contacts" ]
  }
}
    """
    # Default
    default_host_environment = 'development-host'
    default_use = 'development-host'
    default_host_type = 'linux-host'
    write_blocks = 0

    # Header
    header = '# File generated by script, do not edit!\n'
    write_configfile(header, outputfile)

    # Environment array
    env_array = ['development-host','production-host','critical-host']

    # To find the notification method, parse the contacts
    contact_hash = build_hash('contact',inputdir)

    # Loop over the hosts
    for host in object_hash:

        # Debug
        debug('--------------------')
        debug("host_hash: " + str(object_hash[host]))

        host_hash = object_hash[host]

        # Build the head
        config_block = 'object Host "' + host + '" {\n'

        # Get the environment from the host_hash['use']
        if not 'use' in host_hash:
            host_environment = default_host_environment
            host_type = default_host_type
            config_block += '  import "' + default_use + '"\n'
        # Check if the use is a list or not
        elif isinstance(host_hash['use'], list):
            # Loop over all the use classes
            for use in host_hash['use']:
                config_block += '  import "' + use + '"\n'
        else:
            config_block += '  import "' + str(host_hash['use']) + '"\n'

        # Build the basic config
        config_block += '\n'
        config_block += '  address = "' + host_hash['address'] + '"\n\n'
        #config_block = config_block + '  vars.environment = "' + host_environment + '"\n'

        # Check the notifications
        config_block += build_notifications(host_hash,inputdir)

        # Close the host config block
        config_block += '}\n'

        debug(config_block)
        append_configfile(config_block, outputfile)
        write_blocks += 1

    info('Wrote ' + str(write_blocks) + ' host objects')
