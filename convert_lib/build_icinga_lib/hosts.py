#!/usr/bin/python2.7
from convert_lib.general import info,error,write_configfile,append_configfile
from convert_lib.general import debug as debug_general
from convert_lib.build_hash import build_hash
from convert_lib.build_icinga_lib.host_notification import build_host_notification_hash

def debug(msg):
    """
    Function to enable per-object debugging.
    """
    param_debug = False
    if param_debug:
        debug_general(msg)

def build_icinga_hosts(object_hash,outputfile,inputdir):
    """Function to build the icinga hosts config file:
object Host "$hostname" {
  import "linux-host"

  address = "$address"

  vars.environment = "$environment"

  vars.notification["$notification_method"] = {
    groups = [ "$contactgroups" ]
    users = [ "$contacts" ]
  }
}
    """
    # Default
    default_host_environment = 'development-host'
    default_use = 'development-host'
    default_host_type = 'linux-host'

    # Header
    header = '# File generated by script, do not edit!\n'
    write_configfile(header, outputfile)

    # Environment array
    env_array = ['development-host','production-host','critical-host']

    # To find the notification method, parse the contacts
    contact_hash = build_hash('contact',inputdir)

    # Loop over the hosts
    for host in object_hash:

        # Debug
        debug('--------------------')
        debug("host_hash: " + str(object_hash[host]))

        host_hash = object_hash[host]

        # Build the head
        config_block = 'object Host "' + host + '" {\n'

        # Get the environment from the host_hash['use']
        if not 'use' in host_hash:
            host_environment = default_host_environment
            host_type = default_host_type
            config_block += '  import "' + default_use + '"\n'
        # Check if the use is a list or not
        elif isinstance(host_hash['use'], list):
            # Loop over all the use classes
            for use in host_hash['use']:
                config_block += '  import "' + use + '"\n'
        else:
            config_block += '  import "' + str(host_hash['use']) + '"\n'

        # Build the basic config
        config_block += '\n'
        config_block += '  address = "' + host_hash['address'] + '"\n\n'
        #config_block = config_block + '  vars.environment = "' + host_environment + '"\n'

        # Check the notifications
        host_notification = build_host_notification_hash('host', host_hash, contact_hash)
        # Only get the mail and sms notification types
        host_mail = host_notification['mail']
        host_sms = host_notification['sms']

        # Mail
        if host_mail['users'] or host_mail['groups']:
            config_block += '  vars.notification["mail"] = {\n'
            if host_mail['groups'] != []:
                if len(host_mail['groups']) > 1:
                    config_block += '    groups = [ "' + '", "'.join(host_mail['groups']) + '" ]\n'
                else:
                    config_block += '    groups = [ "' + str(host_mail['groups'][0]) + '" ]\n'
            if host_mail['users'] != []:
                if len(host_mail['users']) > 1:
                    config_block += '    users = [ "' + '", "'.join(host_mail['users']) + '" ]\n'
                else:
                    config_block += '    users = [ "' + str(host_mail['users'][0]) + '" ]\n'
            # Close the mail notification block
            config_block += '  }\n\n'

        # SMS
        if host_sms['users'] or host_sms['groups']:
            config_block += '  vars.notification["sms"] = {\n'
            if host_sms['groups'] != []:
                if len(host_sms['groups']) > 1:
                    config_block += '    groups = [ "' + '"," '.join(host_sms['groups']) + '"]\n'
                else:
                    config_block += '    groups = [ "' + str(host_sms['groups'][0]) + ' "]\n'
            if host_sms['users'] != []:
                if len(host_sms['users']) > 1:
                    config_block += '    users = [ "' + '"," '.join(host_sms['users']) + '"]\n'
                else:
                    config_block += '    users = [ "' + str(host_sms['users'][0]) + ' "]\n'
            # Close the sms notification block
            config_block += '  }\n\n'
        # Close the host config block
        config_block += '}\n'

        debug(config_block)
        append_configfile(config_block, outputfile)
